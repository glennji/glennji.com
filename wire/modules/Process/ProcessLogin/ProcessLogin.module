<?php

/**
 * ProcessWire Login Process
 *
 * Provides Login capability for ProcessWire Admin 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessLogin extends Process {

	protected $nameField;
	protected $passField; 
	protected $submitField; 
	protected $form; 
	protected $id; 

	public static function getModuleInfo() {
		return array(
			'title' => 'Login',          
			'summary' => 'Login to ProcessWire', 
			'version' => 100, 
			'permanent' => true, 
			'permission' => 'page-view',
			);
	}

	/**
	 * Build the login form 
	 *
	 */
	public function init() {

		$this->id = isset($_GET['id']) ? (int) $_GET['id'] : ''; 
		$this->allowForgot = $this->modules->isInstalled('ProcessForgotPassword'); 

		return parent::init();
	}

	/**
	 * Check if login posted and attempt login, otherwise render the login form
	 *
	 */
	public function ___execute() {

		if($this->user->isLoggedin()) {
			$this->message("You are logged in."); 
			if($this->user->hasPermission('page-edit')) $this->afterLoginRedirect();
			$url = $this->config->urls->root;
			return "<p><a href='$url'>Continue</a></p>";
		}

		if($this->input->get->forgot && $this->allowForgot) {
			$process = $this->modules->get("ProcessForgotPassword"); 
			return $process->execute();
		}

		$this->buildLoginForm();

		if(isset($_POST['login_submit'])) $this->form->processInput($this->input->post); 

		if(!$this->nameField->value || !$this->passField->value) return $this->renderLoginForm(); 

		$name = $this->fuel('sanitizer')->username($this->nameField->value); 
		$pass = substr($this->passField->value, 0, 50); 

		if($this->fuel('session')->login($name, $pass)) {
			$this->session->message("Successful login for $name"); 
			$this->session->remove('error'); 
			$this->performSystemChecks();
			$this->session->redirect("./?login=1" . ($this->id ? "&id={$this->id}" : ''));  
		} else {
			$this->error("Login failed for $name"); 
		}

		return $this->renderLoginForm();

	}	

	protected function performSystemChecks() {
		if(!$this->user->isSuperuser()) return;
		if(is_file($this->config->paths->root . "install.php")) $this->error("Security Warning: /install.php exists and should be deleted."); 
		if(is_file($this->config->paths->root . "upgrade.php")) $this->error("Security Warning: /upgrade.php exists and should be deleted."); 
		if(is_writable($this->config->paths->root . "site/config.php")) $this->error("Security Warning: /site/config.php is writable and ideally should not be."); 
		if(is_writable($this->config->paths->root . "index.php")) $this->error("Security Warning: /site/index.php is writable and ideally should not be."); 
	}

	protected function buildLoginForm() {

		$this->nameField = $this->modules->get('InputfieldText');
		$this->nameField->set('label', 'Username'); 
		$this->nameField->attr('id+name', 'login_name'); 
		$this->nameField->attr('class', $this->className() . 'Name'); 

		$this->passField = $this->modules->get('InputfieldText');
		$this->passField->set('label', 'Password'); 
		$this->passField->attr('id+name', 'login_pass'); 
		$this->passField->attr('type', 'password'); 
		$this->passField->attr('class', $this->className() . 'Pass'); 

		$this->submitField = $this->modules->get('InputfieldSubmit');
		$this->submitField->attr('name', 'login_submit'); 
		$this->submitField->attr('value', 'Login'); 

		$this->form = $this->modules->get('InputfieldForm');

		// we'll retain an ID field in the GET url, if it was there
		$this->form->attr('action', "./" . ($this->id ? "?id={$this->id}" : '')); 

		$this->form->attr('id', $this->className() . 'Form'); 
		$this->form->add($this->nameField); 
		$this->form->add($this->passField); 
		$this->form->add($this->submitField); 
	}

	/**
	 * Render the login form
	 *
	 */
	protected function renderLoginForm() {
		if(isset($_GET['login'])) {
			$this->afterLoginRedirect();
		} else {
			$this->setFuel('processHeadline', 'Login'); 
			$out = $this->form->render();
			if($this->allowForgot) {
				$out .= "<p><a href='./?forgot=1'>Forgot your password?</a></p>";
			}
			return $out; 
		}
	}

	/**
	 * Log the user out
	 *
	 */
	public function ___executeLogout() {
		$this->session->logout();
		$this->message("You have logged out"); 
		$url = $this->user->hasPermission('page-edit') ? $this->config->urls->admin : $this->config->urls->root;
		$this->session->redirect($url);
	}

	/**
	 * Redirect to admin root after login
	 *
	 * Called only if the login request originated on the actual login page. 
	 *
	 */
	protected function ___afterLoginRedirect() {
		$this->session->redirect($this->pages->get($this->config->adminRootPageID)->url);
	}


}

