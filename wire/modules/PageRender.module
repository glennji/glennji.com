<?php

/**
 * ProcessWire PageRender Module
 *
 * Adds a render method to Page, as used by the PageView Process. 
 * This module is also able to cache page renders.
 * It hooks into Pages and Fieldtypes to ensure cache files are cleaned/deleted when pages are saved/deleted.
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageRender extends WireData implements Module, ConfigurableModule {

	const cacheDirName = 'Page';

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Render ', 
			'version' => 100, 
			'summary' => 'Adds a render method to Page, as used by the PageView Process. This module is also able to cache page renders.',
			'permanent' => true, 
			'singular' => true, 
			'autoload' => true, 
			);
	}

	/**
	 * Initialize the hooks
	 *
	 */
	public function init() {
		$this->addHook('Page::render', $this, 'renderPage'); 
		$this->pages->addHookAfter('save', $this, 'clearCacheFile'); 
		$this->pages->addHookAfter('delete', $this, 'clearCacheFile'); 
		// $this->addHookAfter('Fieldtype::savePageField', $this, 'savePageField'); // removed, see note in commented function
	}

	/**
	 * If $page->save($field) was called (which calls Fieldtype::savePageField), then clear out the Page's cache
	 *
	 * Removed because too much compromise in speed, but kept here for reference in case we determine a faster solution.
	 *
	public function savePageField($event) {
		$page = $event->arguments[0]; 
		if(!$page->template->cache_time) return;
		$this->getCacheFile($page)->remove();
	}
	 */

	/**
	 * Is the page render cache allowed for this request?
	 *
	 * @param Page $page
	 * @return bool
	 *
	 */
	public function isCacheAllowed($page) {

		if(!$page->template || !$page->template->cache_time) return false; 

		if(!$this->user->isGuest()) {
			if(!$page->template->useCacheForUsers) return false; 
			if($page->editable()) return false;
		}

		$allowed = true;

		if(count($_GET) && $page->template->noCacheGetVars) {
			$vars = explode(' ', $page->template->noCacheGetVars); 
			foreach($vars as $name) if($name && isset($_GET[$name])) $allowed = false; 
		} 

		if($allowed && count($_POST) && $page->template->noCachePostVars) {
			$vars = explode(' ', $page->template->noCachePostVars); 
			foreach($vars as $name) if($name && isset($_POST[$name])) $allowed = false; 
		}

		return $allowed; 
	}

	/**
	 * Get a CacheFile object corresponding to this Page
	 *
	 * Note that this does not check if the page is cachable. This is so that if a cachable setting changes the cache can still be removed. 
	 *
	 * @return CacheFile
	 *
	 */
	public function getCacheFile($page, $checkDisableTriggers = false) {

		$path = $this->config->paths->cache . self::cacheDirName . "/";

		if(!is_dir($path)) {
			if(!@mkdir($path)) throw new WireException("Cache path does not exist: $path");
			if($this->config->chmodDir) chmod($path, octdec($this->config->chmodDir));
		}

		$cacheFile = new CacheFile($path, $page->id, $page->template->cache_time);
		if($this->config->chmodFile) $cacheFile->setChmodFile($this->config->chmodFile);
		if($this->config->chmodDir) $cacheFile->setChmodDir($this->config->chmodDir);

		if($this->fuel('page') === $page) {
			$secondaryID = '';
			$pageNum = $this->input->pageNum; 
			$urlSegments = $this->input->urlSegments; 

			if(count($urlSegments)) {
				foreach($urlSegments as $urlSegment) {
					$secondaryID .= $this->sanitizer->pageName($urlSegment) . '+';
				}
			}
			if($pageNum > 1) $secondaryID .= "page{$pageNum}";
			if($secondaryID) $cacheFile->setSecondaryID(rtrim($secondaryID, "+"));
		}	

		return $cacheFile;
	}

	/**
	 * Hook to clear the cache file after a Pages::save or Pages::delete call
	 *
	 */
	public function clearCacheFile($event) {
		$page = $event->arguments[0]; 
		if(!$page->template->cache_time) return;
		$cacheFile = $this->getCacheFile($page); 
		if(!$cacheFile->exists()) return;
		$cacheFile->remove();
		if($this->config->debug) $this->message("Cleared cache file: $cacheFile"); 
	}

	/**
	 * Return a string with the rendered output of this Page (per it's Template)
	 *
	 * If the page's template has caching enabled, then this method will return a cached page render, when valid, 
	 * or save a new cache. Caches are only saved on guest users. 
	 *
	 * @param array options Options to modify the render behavior: 
	 *      forceBuildCache: If true, the cache will be re-created for this page, regardless of whether it's expired or not. 
	 *
	 * @return string rendered data
	 *
	 */
	public function ___renderPage($event) {

		// just in case one page is rendering another, save the previous
		$_page = $this->fuel('page'); 
		$page = $event->object; 

		// set the context of the new page to be system-wide
		// only applicable if rendering a page within a page
		if(!$page->id != $_page->id) $this->setFuel('page', $page);

		$options = count($event->arguments) ? $event->arguments[0] : array();

		if($page->status >= Page::statusUnpublished && !$page->viewable()) {
			$this->setFuel('page', $_page) ;
			throw new WirePermissionException("Page '{$page->url}' is not currently viewable.");
		}

		$defaultOptions = array(
			'forceBuildCache' => false,
			);
		$options = array_merge($defaultOptions, $options);

		$cacheAllowed = $this->isCacheAllowed($page); 
		$cacheFile = null;

		if($cacheAllowed) {
			$cacheFile = $this->getCacheFile($page);
			if(!$options['forceBuildCache'] && ($data = $cacheFile->get()) !== false) {
				$event->return = $data;
				$this->setFuel('page', $_page);
				return;
			}
		}

		if(!$page->outputFormatting) {
			$this->setFuel('page', $_page); 
			throw new WireException(
				"Page {$page->url} may not be rendered because outputFormatting is set to false. " . 
				"Call \$page->setOutputFormatting(true) before rendering the page."
				);
		}

		$output = $page->output;
		$data = $output ? $output->render() : '';

		if($data && $cacheAllowed && $cacheFile) $cacheFile->save($data);
		$event->return = $data; 
		$this->setFuel('page', $_page); 
	}

	/**
	 * Provide a disk cache clearing capability within the module's configuration screen
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$path = Wire::getFuel('config')->paths->cache . self::cacheDirName . '/';
		$numPages = 0;
		$numFiles = 0;
		$dir = new DirectoryIterator($path); 
		$clearNow = Wire::getFuel('input')->post->clearCache ? true : false; 

		foreach($dir as $file) {
			if(!$file->isDir() || $file->isDot() || !ctype_digit($file->getFilename())) continue; 
			$numPages++; 
			if(!$clearNow) continue; 
			$d = new DirectoryIterator($file->getPathname()); 
			foreach($d as $f) {
				if(!$f->isDir() && preg_match('/\.cache$/D', $f->getFilename())) {
					$numFiles++; 
					@unlink($f->getPathname()); 
				}
			}
			@rmdir($file->getPathname()); 
		}

		$inputfields = new InputfieldWrapper();
		if($clearNow) {
			$inputfields->message("Cleared $numFiles cache files for $numPages pages"); 
			$numPages = 0;
		}

		$name = "clearCache";
		$f = Wire::getFuel('modules')->get('InputfieldCheckbox');
		$f->attr('name', $name);
		$f->attr('value', 1);
		$f->label = "Clear the Page Render Disk Cache?"; 
		$f->description = "There are currently $numPages pages cached in $path";

		$inputfields->append($f);

		return $inputfields;

	}

}
